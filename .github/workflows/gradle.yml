name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

  Deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: guithuib
          password: ${{ secrets.GH_PAT }}

      - name: Set up Docker Buildx
        id: docker_buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and Push Docker Image
        run: |
          docker buildx create --use
          docker buildx build -t ghcr.io/guithuib/cicd-demo:latest . --push
        env:
          DOCKER_CLI: docker
          DOCKER_BUILDKIT: 1
        timeout-minutes: 10

      - name: Docker compose on remote server
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY  }}
          HOSTNAME : 35.174.101.105
          USER_NAME : ${{ secrets.USER_NAME  }}
          GH_PAT: ${{ secrets.GH_PAT }}

          VAR_1: ${{ secrets.VAR_1 }}
          VAR_2: ${{ secrets.value2 }}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@35.174.101.105 'bash -s' << EOF
          
            echo "VAR_1=${VAR_1}" | sudo tee .env > /dev/null
            echo "VAR_2=${VAR_2}" | sudo tee -a .env > /dev/null
          
            docker login ghcr.io -u guithuib -p "$GH_PAT"
            docker pull ghcr.io/guithuib/cicd-demo:latest
            docker-compose up -d --build
          EOF

          
          
          
#      - name: Set up SSH keys
#        uses: webfactory/ssh-agent@v0.7.0
#        with:
#          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

#      - name: Add host to known_hosts
#        run: ssh-keyscan -H 35.174.101.105 >> ~/.ssh/known_hosts

#      - name: Create SSH Private Key File
#        run: |
#          echo "$EC2_SSH_KEY" > private_key
#          chmod 600 private_key
#        env:
#          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

#      - name: Copy files to EC2 server
#        run: |
#          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@35.174.101.105 'mkdir -p /path/to/destination'
#          scp -i ${{ secrets.EC2_SSH_KEY }} -r build/libs/**.jar ubuntu@35.174.101.105:/path/to/destination


#      - name: Deploy application
#        env:
#          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY  }}
#          HOSTNAME : 35.174.101.105
#          USER_NAME : ${{ secrets.USER_NAME  }}
#        run: |
#          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
#          scp -o StrictHostKeyChecking=no -i private_key build/libs/**.jar ubuntu@35.174.101.105:build/libs/
#          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@35.174.101.105
#          docker-compose up -d --build

#      - name: Set up SSH key
#        run: echo "${{ secrets.AWS_PEM_KEY }}" > ~/.ssh/aws.pem && chmod 600 ~/.ssh/aws.pem


#      - name: Set up Python
#        uses: actions/setup-python@v3
#        with:
#          python-version: '3.x'

#      - name: Install Ansible
#        run: pip install ansible
#
#      - name: Deploy with Ansible
#        env:
#          HOST: 35.174.101.105
#          JAR_SOURCE: "${{ github.workspace }}/build/libs/scrape-demo-0.0.1-SNAPSHOT.jar"
#        run: ansible-playbook -i inventory.ini playbook.yml

          






#jobs:
#  build:
#    runs-on: ubuntu-latest
#

#               scp -o StrictHostKeyChecking=no -i private_key build/libs/**.jar ubuntu@35.174.101.105:build/libs/
#               scp -o StrictHostKeyChecking=no -i private_key "${{ github.workspace }}/build/libs/scrape-demo.jar" ubuntu@35.174.101.105:/build/libs/

#      - name: Build the docker_compose
#        run: docker-compose up -d --build


#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Make gradlew executable
#        run: chmod +x gradlew
#
#      - name: Build with Gradle
#        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
#        with:
#          arguments: build
#
#      - name: Set up SSH key
#        run: |
#          mkdir -p ~/.ssh || true
#          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ryan-demo.pem
#          chmod 600 ~/.ssh/ryan-demo.pem
#          ssh-keygen -y -f ~/.ssh/ryan-demo.pem > ~/.ssh/id_rsa
#          ssh-keyscan -H  35.174.101.105 >> ~/.ssh/known_hosts
#        env:
#          SSH_AUTH_SOCK: /tmp/ssh_agent.sock


#      - name: Set up SSH
#        uses: webfactory/ssh-agent@v0.7.0
#        with:
#          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

#      - name: SSH into EC2 and copy JAR file
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ${{ runner.workspace }}/${{ secrets.EC2_SSH_KEY }} ec2-user@YOUR_EC2_PUBLIC_IP 'mkdir -p ./build'
#          scp -i ${{ runner.workspace }}/${{ secrets.EC2_SSH_KEY }} ./build.jar ec2-user@YOUR_EC2_PUBLIC_IP:/path/on/ec2/




#      - name: Set up SSH key
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/your-ec2-key.pem
#          chmod 600 ~/.ssh/your-ec2-key.pem
#          ssh-keygen -y -f ~/.ssh/your-ec2-key.pem > ~/.ssh/id_rsa
#          ssh-keyscan -H your-ec2-instance-ip >> ~/.ssh/known_hosts
#        env:
#          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#
#      - name: Copy JAR file
#        run: scp -i ~/.ssh/your-ec2-key.pem path/to/your.jar ec2-user@your-ec2-instance-ip:/path/on/ec2/

